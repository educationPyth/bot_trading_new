import asyncio

from aiogram import Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import F, Router

from core.parser.handler_parser import check_transactions
from core.utils.callbackdata import UserChannel, UserEditChannel, RemoveChannel
import core.keyboards.inline as kb
import database.requests as rq


router = Router()


@router.message(Command('start'))
async def get_start(message: Message, bot: Bot):
    user_id = message.from_user.id
    await rq.set_user(user_id)
    await bot.send_message(user_id,f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}\n'
                                   f'–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –ª/c, –≥–¥–µ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç.\n'
                                   f'\n'
                                   f'–î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üîê\n'
                                   f'–ó–∞—Ç–µ–º –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_settings –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', parse_mode='HTML')


@router.message(Command('start_settings'))
async def start_settings(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=await kb.menu())


@router.message(Command('menu'))
async def view_menu(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=await kb.menu())


@router.callback_query(F.data == 'create_bot')
async def create_bot(callback: CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    active_chat = await rq.check_chat(chat_id)
    await callback.answer()

    if active_chat:
        await callback.message.answer('‚ùå‚ùå–í —ç—Ç–æ–º —á–∞—Ç-–∫–∞–Ω–∞–ª–µ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç.‚ùå‚ùå\n\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_settings –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç-–∫–∞–Ω–∞–ª–µ.\n'
                             '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–∞–≤ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç—É', reply_markup=await kb.home())
    else:
        await state.update_data(chat=chat_id)
        await state.update_data(title_channel=callback.message.chat.title)
        await callback.message.edit_text('–ü–µ—Ä–µ–¥–∞–π—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è\n\n'
                                         '* - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ:', reply_markup=await kb.settings_create())


@router.callback_query(F.data == 'home')
async def get_back(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–í–´–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=await kb.menu())


@router.callback_query(F.data == 'contract')
async def get_contract(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç c coinmarketcap (‚ÄºÔ∏è‚ÄºÔ∏è  Ô∏ècontract pair ‚ÄºÔ∏è‚ÄºÔ∏è)\n'
                                  '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç.')
    await state.set_state(UserChannel.contract)


@router.message(UserChannel.contract)
async def step_contract(message: Message, state: FSMContext):
    await state.update_data(contract=message.text)
    chat_id = message.chat.id
    await state.update_data(chat=chat_id)
    await state.update_data(title_channel=message.chat.title)
    await message.answer('–ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω! –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Å—Å—ã–ª–∫–∏', reply_markup=await kb.settings_add() )


@router.callback_query(F.data == 'photo')
async def get_photo(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text('–í—Å—Ç–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!')
    await state.set_state(UserChannel.photo)


@router.message(UserChannel.photo)
async def step_photo(message: Message, state: FSMContext):
    if message.photo:
        await state.update_data(photo=message.photo[-1].file_id)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞.', reply_markup=await kb.settings_add())
    else:
        await message.answer('‚ùå‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫—É.‚ùå‚ùå')


@router.callback_query(F.data == 'links')
async def get_links(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text('–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
    await state.set_state(UserChannel.links)


@router.message(UserChannel.links)
async def step_links(message: Message, state: FSMContext):
    if message.text:
        await state.update_data(links=message.text)
        await message.answer('–°—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.', reply_markup=await kb.settings_add())
    else:
        await message.answer('–°—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')


@router.callback_query(F.data == 'finish_state')
async def finish_state(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await callback.answer()
    data = await state.get_data()

    if 'contract' in data:

        contract = data['contract']
        chat = data['chat']
        transactions_time = 0
        title_channel = data['title_channel']
        if title_channel is None:
            title_channel = '–ó–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞'
        photo_id = data.get('photo', '')
        links = data.get('links', '')


        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        response_text = (f'‚úÖ‚úÖ–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã‚úÖ‚úÖ\n'
                         f'–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {data["contract"]}\n'
                         f'–ö–∞—Ä—Ç–∏–Ω–∫–∞: {photo_id if photo_id else "–ù–µ—Ç"}\n'
                         f'–°—Å—ã–ª–∫–∏: {links if links else "–ù–µ—Ç"}\n'
                         f'–ß–∞—Ç: {chat}\n'
                         f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {title_channel}\n\n'
                         f'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–∏—Ç–µ /startbot ‚ñ∂Ô∏è')

        await callback.message.answer(response_text, reply_markup=await kb.home())
        await rq.set_data(tg_id=user_id, chat=chat, contract=contract, photo=photo_id, links=links, title_channel=title_channel, transactions_time=transactions_time)
        await state.clear()

    else:
        await callback.message.answer('‚ÄºÔ∏è–ü–æ–ª–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!‚ÄºÔ∏è', reply_markup=await kb.settings_add())


@router.callback_query(F.data == 'my_bots')
async def view_my_bots(callback: CallbackQuery):
    user_id = callback.from_user.id  # tg_id
    data = await rq.get_data(user_id)

    await callback.answer()
    if data['bots']:
        await callback.message.answer(f'–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.\n\n'
                                      f'–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:\n'
                                      f'üëáüëáüëá', reply_markup=await kb.view_channel(user_id))
    else:
        await callback.message.answer(f'–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤.', reply_markup=await kb.add_bot())


@router.callback_query(F.data.startswith("name_"))
async def choose_delete_bot(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data_button = callback.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä, –±—É–¥–µ—Ç 'name_1'
    bot_id = data_button.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ "name_"
    await state.update_data(bot_id=bot_id)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω—É–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å bot_id
    await callback.answer()
    await callback.message.answer(f'–ß—Ç–æ –¥–µ–ª–∞–µ–º?', reply_markup=await kb.settings_bot())
    await state.set_state(RemoveChannel.name_channel)


@router.callback_query(F.data == 'delete_bot', RemoveChannel.name_channel)
async def delete_bot(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data_state = await state.get_data()
    bot_id = data_state.get('bot_id')

    await callback.answer()
    await rq.delete_data(bot_id)
    await callback.message.answer(f'–ë–æ—Ç —É–¥–∞–ª–µ–Ω!‚úÖ\n\n'
                                  f'–°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:üëáüëáüëá\b', reply_markup=await kb.view_channel(user_id))


@router.callback_query(F.data == 'edit_bot')
async def edit_settings(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ..')


@router.message(F.text == '/startbot')
async def start_bot(message: Message, bot: Bot):
    await message.delete()
    user_id = message.from_user.id
    chat_id = message.chat.id
    time_delay = 30

    while True:
        data_parser = await check_transactions(user_id=user_id, chat_id=chat_id)
        await asyncio.sleep(time_delay)

        if data_parser == 'equally':
            print('equally')
            continue
        elif data_parser:
            print(type(data_parser))
            print(data_parser)
            text = data_parser['html']
            photo = data_parser['photo']

            if photo:
                await bot.send_photo(chat_id=chat_id,
                                     caption=f'{text}',
                                     photo=f'{photo}',
                                     reply_markup=await kb.user_links(f'{chat_id}'),
                                     parse_mode='HTML')
            else:
                await bot.send_message(chat_id=chat_id, text=f'{text}',reply_markup=await kb.user_links(f'{chat_id}'),  parse_mode='HTML')
        else:
            await bot.send_message(chat_id=chat_id, text='–ü—Ä–æ–±–ª–µ–º—ã —Å Coinmarketcup. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.')
            break




